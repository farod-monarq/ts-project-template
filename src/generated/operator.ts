/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: operator.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/any";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace operator {
    export class AccountListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            offset?: number;
            limit?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("offset" in data && data.offset != undefined) {
                    this.offset = data.offset;
                }
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
            }
        }
        get offset() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set offset(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            offset?: number;
            limit?: number;
        }): AccountListRequest {
            const message = new AccountListRequest({});
            if (data.offset != null) {
                message.offset = data.offset;
            }
            if (data.limit != null) {
                message.limit = data.limit;
            }
            return message;
        }
        toObject() {
            const data: {
                offset?: number;
                limit?: number;
            } = {};
            if (this.offset != null) {
                data.offset = this.offset;
            }
            if (this.limit != null) {
                data.limit = this.limit;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.offset != 0)
                writer.writeInt32(1, this.offset);
            if (this.limit != 0)
                writer.writeInt32(2, this.limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.offset = reader.readInt32();
                        break;
                    case 2:
                        message.limit = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountListRequest {
            return AccountListRequest.deserialize(bytes);
        }
    }
    export class AccountListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accounts?: Account[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accounts" in data && data.accounts != undefined) {
                    this.accounts = data.accounts;
                }
            }
        }
        get accounts() {
            return pb_1.Message.getRepeatedWrapperField(this, Account, 1) as Account[];
        }
        set accounts(value: Account[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            accounts?: ReturnType<typeof Account.prototype.toObject>[];
        }): AccountListResponse {
            const message = new AccountListResponse({});
            if (data.accounts != null) {
                message.accounts = data.accounts.map(item => Account.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                accounts?: ReturnType<typeof Account.prototype.toObject>[];
            } = {};
            if (this.accounts != null) {
                data.accounts = this.accounts.map((item: Account) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accounts.length)
                writer.writeRepeatedMessage(1, this.accounts, (item: Account) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccountListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccountListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.accounts, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Account.deserialize(reader), Account));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccountListResponse {
            return AccountListResponse.deserialize(bytes);
        }
    }
    export class Account extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            externalId?: string;
            cashierId?: string;
            info?: dependency_1.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("cashierId" in data && data.cashierId != undefined) {
                    this.cashierId = data.cashierId;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get cashierId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set cashierId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get info() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 4) as dependency_1.google.protobuf.Any;
        }
        set info(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            id?: string;
            externalId?: string;
            cashierId?: string;
            info?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
        }): Account {
            const message = new Account({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (data.cashierId != null) {
                message.cashierId = data.cashierId;
            }
            if (data.info != null) {
                message.info = dependency_1.google.protobuf.Any.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                externalId?: string;
                cashierId?: string;
                info?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.cashierId != null) {
                data.cashierId = this.cashierId;
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.externalId.length)
                writer.writeString(2, this.externalId);
            if (this.cashierId.length)
                writer.writeString(3, this.cashierId);
            if (this.has_info)
                writer.writeMessage(4, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Account {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Account();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.externalId = reader.readString();
                        break;
                    case 3:
                        message.cashierId = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.info, () => message.info = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Account {
            return Account.deserialize(bytes);
        }
    }
    export class Balance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            value?: number;
            coin?: string;
            unit?: string;
            accountId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
                if ("coin" in data && data.coin != undefined) {
                    this.coin = data.coin;
                }
                if ("unit" in data && data.unit != undefined) {
                    this.unit = data.unit;
                }
                if ("accountId" in data && data.accountId != undefined) {
                    this.accountId = data.accountId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set value(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get coin() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set coin(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get unit() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set unit(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get accountId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set accountId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            id?: string;
            value?: number;
            coin?: string;
            unit?: string;
            accountId?: string;
        }): Balance {
            const message = new Balance({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            if (data.coin != null) {
                message.coin = data.coin;
            }
            if (data.unit != null) {
                message.unit = data.unit;
            }
            if (data.accountId != null) {
                message.accountId = data.accountId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                value?: number;
                coin?: string;
                unit?: string;
                accountId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            if (this.coin != null) {
                data.coin = this.coin;
            }
            if (this.unit != null) {
                data.unit = this.unit;
            }
            if (this.accountId != null) {
                data.accountId = this.accountId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.value != 0)
                writer.writeDouble(2, this.value);
            if (this.coin.length)
                writer.writeString(3, this.coin);
            if (this.unit.length)
                writer.writeString(4, this.unit);
            if (this.accountId.length)
                writer.writeString(5, this.accountId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Balance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Balance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.value = reader.readDouble();
                        break;
                    case 3:
                        message.coin = reader.readString();
                        break;
                    case 4:
                        message.unit = reader.readString();
                        break;
                    case 5:
                        message.accountId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Balance {
            return Balance.deserialize(bytes);
        }
    }
    export class GameAccount extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            inGameCurrency?: string;
            balanceCurrency?: string;
            externalId?: string;
            balanceId?: string;
            accountId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("inGameCurrency" in data && data.inGameCurrency != undefined) {
                    this.inGameCurrency = data.inGameCurrency;
                }
                if ("balanceCurrency" in data && data.balanceCurrency != undefined) {
                    this.balanceCurrency = data.balanceCurrency;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("balanceId" in data && data.balanceId != undefined) {
                    this.balanceId = data.balanceId;
                }
                if ("accountId" in data && data.accountId != undefined) {
                    this.accountId = data.accountId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get inGameCurrency() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set inGameCurrency(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get balanceCurrency() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set balanceCurrency(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get balanceId() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set balanceId(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get accountId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set accountId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: string;
            inGameCurrency?: string;
            balanceCurrency?: string;
            externalId?: string;
            balanceId?: string;
            accountId?: string;
        }): GameAccount {
            const message = new GameAccount({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.inGameCurrency != null) {
                message.inGameCurrency = data.inGameCurrency;
            }
            if (data.balanceCurrency != null) {
                message.balanceCurrency = data.balanceCurrency;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (data.balanceId != null) {
                message.balanceId = data.balanceId;
            }
            if (data.accountId != null) {
                message.accountId = data.accountId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                inGameCurrency?: string;
                balanceCurrency?: string;
                externalId?: string;
                balanceId?: string;
                accountId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.inGameCurrency != null) {
                data.inGameCurrency = this.inGameCurrency;
            }
            if (this.balanceCurrency != null) {
                data.balanceCurrency = this.balanceCurrency;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.balanceId != null) {
                data.balanceId = this.balanceId;
            }
            if (this.accountId != null) {
                data.accountId = this.accountId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.inGameCurrency.length)
                writer.writeString(2, this.inGameCurrency);
            if (this.balanceCurrency.length)
                writer.writeString(3, this.balanceCurrency);
            if (this.externalId.length)
                writer.writeString(4, this.externalId);
            if (this.balanceId.length)
                writer.writeString(5, this.balanceId);
            if (this.accountId.length)
                writer.writeString(6, this.accountId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameAccount {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameAccount();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.inGameCurrency = reader.readString();
                        break;
                    case 3:
                        message.balanceCurrency = reader.readString();
                        break;
                    case 4:
                        message.externalId = reader.readString();
                        break;
                    case 5:
                        message.balanceId = reader.readString();
                        break;
                    case 6:
                        message.accountId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameAccount {
            return GameAccount.deserialize(bytes);
        }
    }
    export class GameMachine extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
            key?: string;
            externalId?: string;
            studio?: string;
            info?: dependency_1.google.protobuf.Any;
            providerId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("externalId" in data && data.externalId != undefined) {
                    this.externalId = data.externalId;
                }
                if ("studio" in data && data.studio != undefined) {
                    this.studio = data.studio;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
                if ("providerId" in data && data.providerId != undefined) {
                    this.providerId = data.providerId;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set key(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get externalId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set externalId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get studio() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set studio(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get info() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 5) as dependency_1.google.protobuf.Any;
        }
        set info(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get providerId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set providerId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            id?: string;
            key?: string;
            externalId?: string;
            studio?: string;
            info?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            providerId?: string;
        }): GameMachine {
            const message = new GameMachine({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.externalId != null) {
                message.externalId = data.externalId;
            }
            if (data.studio != null) {
                message.studio = data.studio;
            }
            if (data.info != null) {
                message.info = dependency_1.google.protobuf.Any.fromObject(data.info);
            }
            if (data.providerId != null) {
                message.providerId = data.providerId;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                key?: string;
                externalId?: string;
                studio?: string;
                info?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                providerId?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.externalId != null) {
                data.externalId = this.externalId;
            }
            if (this.studio != null) {
                data.studio = this.studio;
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            if (this.providerId != null) {
                data.providerId = this.providerId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (this.key.length)
                writer.writeString(2, this.key);
            if (this.externalId.length)
                writer.writeString(3, this.externalId);
            if (this.studio.length)
                writer.writeString(4, this.studio);
            if (this.has_info)
                writer.writeMessage(5, this.info, () => this.info.serialize(writer));
            if (this.providerId.length)
                writer.writeString(6, this.providerId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameMachine {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameMachine();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.key = reader.readString();
                        break;
                    case 3:
                        message.externalId = reader.readString();
                        break;
                    case 4:
                        message.studio = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.info, () => message.info = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    case 6:
                        message.providerId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameMachine {
            return GameMachine.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedOperatorServiceService {
        static definition = {
            GetAccountList: {
                path: "/operator.OperatorService/GetAccountList",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: AccountListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AccountListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AccountListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AccountListResponse.deserialize(new Uint8Array(bytes))
            },
            StreamAccountList: {
                path: "/operator.OperatorService/StreamAccountList",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: AccountListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AccountListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Account) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Account.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract GetAccountList(call: grpc_1.ServerUnaryCall<AccountListRequest, AccountListResponse>, callback: grpc_1.sendUnaryData<AccountListResponse>): void;
        abstract StreamAccountList(call: grpc_1.ServerWritableStream<AccountListRequest, Account>): void;
    }
    export class OperatorServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedOperatorServiceService.definition, "OperatorService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        GetAccountList: GrpcUnaryServiceInterface<AccountListRequest, AccountListResponse> = (message: AccountListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<AccountListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<AccountListResponse>, callback?: grpc_1.requestCallback<AccountListResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAccountList(message, metadata, options, callback);
        };
        StreamAccountList: GrpcStreamServiceInterface<AccountListRequest, Account> = (message: AccountListRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<Account> => {
            return super.StreamAccountList(message, metadata, options);
        };
    }
}
