/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: mock.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/any";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace mock {
    export class GameSessionMock extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            account_id?: string;
            machine_id?: string;
            in_game_iso?: string;
            balance_iso?: string;
            count?: number;
            template?: GameActionItemTemplate[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
                if ("machine_id" in data && data.machine_id != undefined) {
                    this.machine_id = data.machine_id;
                }
                if ("in_game_iso" in data && data.in_game_iso != undefined) {
                    this.in_game_iso = data.in_game_iso;
                }
                if ("balance_iso" in data && data.balance_iso != undefined) {
                    this.balance_iso = data.balance_iso;
                }
                if ("count" in data && data.count != undefined) {
                    this.count = data.count;
                }
                if ("template" in data && data.template != undefined) {
                    this.template = data.template;
                }
            }
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set account_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get machine_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set machine_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get in_game_iso() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set in_game_iso(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get balance_iso() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set balance_iso(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get count() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set count(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get template() {
            return pb_1.Message.getRepeatedWrapperField(this, GameActionItemTemplate, 6) as GameActionItemTemplate[];
        }
        set template(value: GameActionItemTemplate[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            account_id?: string;
            machine_id?: string;
            in_game_iso?: string;
            balance_iso?: string;
            count?: number;
            template?: ReturnType<typeof GameActionItemTemplate.prototype.toObject>[];
        }): GameSessionMock {
            const message = new GameSessionMock({});
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            if (data.machine_id != null) {
                message.machine_id = data.machine_id;
            }
            if (data.in_game_iso != null) {
                message.in_game_iso = data.in_game_iso;
            }
            if (data.balance_iso != null) {
                message.balance_iso = data.balance_iso;
            }
            if (data.count != null) {
                message.count = data.count;
            }
            if (data.template != null) {
                message.template = data.template.map(item => GameActionItemTemplate.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                account_id?: string;
                machine_id?: string;
                in_game_iso?: string;
                balance_iso?: string;
                count?: number;
                template?: ReturnType<typeof GameActionItemTemplate.prototype.toObject>[];
            } = {};
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            if (this.machine_id != null) {
                data.machine_id = this.machine_id;
            }
            if (this.in_game_iso != null) {
                data.in_game_iso = this.in_game_iso;
            }
            if (this.balance_iso != null) {
                data.balance_iso = this.balance_iso;
            }
            if (this.count != null) {
                data.count = this.count;
            }
            if (this.template != null) {
                data.template = this.template.map((item: GameActionItemTemplate) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.account_id.length)
                writer.writeString(1, this.account_id);
            if (this.machine_id.length)
                writer.writeString(2, this.machine_id);
            if (this.in_game_iso.length)
                writer.writeString(3, this.in_game_iso);
            if (this.balance_iso.length)
                writer.writeString(4, this.balance_iso);
            if (this.count != 0)
                writer.writeInt32(5, this.count);
            if (this.template.length)
                writer.writeRepeatedMessage(6, this.template, (item: GameActionItemTemplate) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameSessionMock {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameSessionMock();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.account_id = reader.readString();
                        break;
                    case 2:
                        message.machine_id = reader.readString();
                        break;
                    case 3:
                        message.in_game_iso = reader.readString();
                        break;
                    case 4:
                        message.balance_iso = reader.readString();
                        break;
                    case 5:
                        message.count = reader.readInt32();
                        break;
                    case 6:
                        reader.readMessage(message.template, () => pb_1.Message.addToRepeatedWrapperField(message, 6, GameActionItemTemplate.deserialize(reader), GameActionItemTemplate));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameSessionMock {
            return GameSessionMock.deserialize(bytes);
        }
    }
    export class GameActionItemTemplate extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            action?: string;
            amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get action() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set action(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            action?: string;
            amount?: number;
        }): GameActionItemTemplate {
            const message = new GameActionItemTemplate({});
            if (data.action != null) {
                message.action = data.action;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                action?: string;
                amount?: number;
            } = {};
            if (this.action != null) {
                data.action = this.action;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.action.length)
                writer.writeString(1, this.action);
            if (this.amount != 0)
                writer.writeDouble(2, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameActionItemTemplate {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameActionItemTemplate();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.action = reader.readString();
                        break;
                    case 2:
                        message.amount = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameActionItemTemplate {
            return GameActionItemTemplate.deserialize(bytes);
        }
    }
    export class GameEvent extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user_id?: string;
            currency?: string;
            game?: string;
            game_id?: string;
            finished?: boolean;
            actions?: GameActionItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user_id" in data && data.user_id != undefined) {
                    this.user_id = data.user_id;
                }
                if ("currency" in data && data.currency != undefined) {
                    this.currency = data.currency;
                }
                if ("game" in data && data.game != undefined) {
                    this.game = data.game;
                }
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
                if ("finished" in data && data.finished != undefined) {
                    this.finished = data.finished;
                }
                if ("actions" in data && data.actions != undefined) {
                    this.actions = data.actions;
                }
            }
        }
        get user_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set user_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get currency() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set currency(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get game() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set game(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set game_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get finished() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set finished(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get actions() {
            return pb_1.Message.getRepeatedWrapperField(this, GameActionItem, 6) as GameActionItem[];
        }
        set actions(value: GameActionItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            user_id?: string;
            currency?: string;
            game?: string;
            game_id?: string;
            finished?: boolean;
            actions?: ReturnType<typeof GameActionItem.prototype.toObject>[];
        }): GameEvent {
            const message = new GameEvent({});
            if (data.user_id != null) {
                message.user_id = data.user_id;
            }
            if (data.currency != null) {
                message.currency = data.currency;
            }
            if (data.game != null) {
                message.game = data.game;
            }
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            if (data.finished != null) {
                message.finished = data.finished;
            }
            if (data.actions != null) {
                message.actions = data.actions.map(item => GameActionItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                user_id?: string;
                currency?: string;
                game?: string;
                game_id?: string;
                finished?: boolean;
                actions?: ReturnType<typeof GameActionItem.prototype.toObject>[];
            } = {};
            if (this.user_id != null) {
                data.user_id = this.user_id;
            }
            if (this.currency != null) {
                data.currency = this.currency;
            }
            if (this.game != null) {
                data.game = this.game;
            }
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            if (this.finished != null) {
                data.finished = this.finished;
            }
            if (this.actions != null) {
                data.actions = this.actions.map((item: GameActionItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.user_id.length)
                writer.writeString(1, this.user_id);
            if (this.currency.length)
                writer.writeString(2, this.currency);
            if (this.game.length)
                writer.writeString(3, this.game);
            if (this.game_id.length)
                writer.writeString(4, this.game_id);
            if (this.finished != false)
                writer.writeBool(5, this.finished);
            if (this.actions.length)
                writer.writeRepeatedMessage(6, this.actions, (item: GameActionItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameEvent {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameEvent();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.user_id = reader.readString();
                        break;
                    case 2:
                        message.currency = reader.readString();
                        break;
                    case 3:
                        message.game = reader.readString();
                        break;
                    case 4:
                        message.game_id = reader.readString();
                        break;
                    case 5:
                        message.finished = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.actions, () => pb_1.Message.addToRepeatedWrapperField(message, 6, GameActionItem.deserialize(reader), GameActionItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameEvent {
            return GameEvent.deserialize(bytes);
        }
    }
    export class GameActionItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            action?: string;
            amount?: number;
            action_id?: string;
            original_action_id?: string;
            jackpot_contribution?: number;
            jackpot_win?: number;
            properties?: Map<string, dependency_1.google.protobuf.Any>;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("action" in data && data.action != undefined) {
                    this.action = data.action;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("action_id" in data && data.action_id != undefined) {
                    this.action_id = data.action_id;
                }
                if ("original_action_id" in data && data.original_action_id != undefined) {
                    this.original_action_id = data.original_action_id;
                }
                if ("jackpot_contribution" in data && data.jackpot_contribution != undefined) {
                    this.jackpot_contribution = data.jackpot_contribution;
                }
                if ("jackpot_win" in data && data.jackpot_win != undefined) {
                    this.jackpot_win = data.jackpot_win;
                }
                if ("properties" in data && data.properties != undefined) {
                    this.properties = data.properties;
                }
            }
            if (!this.properties)
                this.properties = new Map();
        }
        get action() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set action(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get action_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set action_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get original_action_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set original_action_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get jackpot_contribution() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set jackpot_contribution(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get jackpot_win() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set jackpot_win(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get properties() {
            return pb_1.Message.getField(this, 7) as any as Map<string, dependency_1.google.protobuf.Any>;
        }
        set properties(value: Map<string, dependency_1.google.protobuf.Any>) {
            pb_1.Message.setField(this, 7, value as any);
        }
        static fromObject(data: {
            action?: string;
            amount?: number;
            action_id?: string;
            original_action_id?: string;
            jackpot_contribution?: number;
            jackpot_win?: number;
            properties?: {
                [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            };
        }): GameActionItem {
            const message = new GameActionItem({});
            if (data.action != null) {
                message.action = data.action;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.action_id != null) {
                message.action_id = data.action_id;
            }
            if (data.original_action_id != null) {
                message.original_action_id = data.original_action_id;
            }
            if (data.jackpot_contribution != null) {
                message.jackpot_contribution = data.jackpot_contribution;
            }
            if (data.jackpot_win != null) {
                message.jackpot_win = data.jackpot_win;
            }
            if (typeof data.properties == "object") {
                message.properties = new Map(Object.entries(data.properties).map(([key, value]) => [key, dependency_1.google.protobuf.Any.fromObject(value)]));
            }
            return message;
        }
        toObject() {
            const data: {
                action?: string;
                amount?: number;
                action_id?: string;
                original_action_id?: string;
                jackpot_contribution?: number;
                jackpot_win?: number;
                properties?: {
                    [key: string]: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                };
            } = {};
            if (this.action != null) {
                data.action = this.action;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.action_id != null) {
                data.action_id = this.action_id;
            }
            if (this.original_action_id != null) {
                data.original_action_id = this.original_action_id;
            }
            if (this.jackpot_contribution != null) {
                data.jackpot_contribution = this.jackpot_contribution;
            }
            if (this.jackpot_win != null) {
                data.jackpot_win = this.jackpot_win;
            }
            if (this.properties != null) {
                data.properties = (Object.fromEntries)((Array.from)(this.properties).map(([key, value]) => [key, value.toObject()]));
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.action.length)
                writer.writeString(1, this.action);
            if (this.amount != 0)
                writer.writeDouble(2, this.amount);
            if (this.action_id.length)
                writer.writeString(3, this.action_id);
            if (this.original_action_id.length)
                writer.writeString(4, this.original_action_id);
            if (this.jackpot_contribution != 0)
                writer.writeDouble(5, this.jackpot_contribution);
            if (this.jackpot_win != 0)
                writer.writeDouble(6, this.jackpot_win);
            for (const [key, value] of this.properties) {
                writer.writeMessage(7, this.properties, () => {
                    writer.writeString(1, key);
                    writer.writeMessage(2, value, () => value.serialize(writer));
                });
            }
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameActionItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameActionItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.action = reader.readString();
                        break;
                    case 2:
                        message.amount = reader.readDouble();
                        break;
                    case 3:
                        message.action_id = reader.readString();
                        break;
                    case 4:
                        message.original_action_id = reader.readString();
                        break;
                    case 5:
                        message.jackpot_contribution = reader.readDouble();
                        break;
                    case 6:
                        message.jackpot_win = reader.readDouble();
                        break;
                    case 7:
                        reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.properties as any, reader, reader.readString, () => {
                            let value;
                            reader.readMessage(message, () => value = dependency_1.google.protobuf.Any.deserialize(reader));
                            return value;
                        }));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameActionItem {
            return GameActionItem.deserialize(bytes);
        }
    }
    export class Task extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            taskId?: string;
            taskName?: string;
            status?: string;
            result?: dependency_1.google.protobuf.Any;
            error?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("taskId" in data && data.taskId != undefined) {
                    this.taskId = data.taskId;
                }
                if ("taskName" in data && data.taskName != undefined) {
                    this.taskName = data.taskName;
                }
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get taskId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set taskId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get taskName() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set taskName(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set status(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get result() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 4) as dependency_1.google.protobuf.Any;
        }
        set result(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_result() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set error(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            taskId?: string;
            taskName?: string;
            status?: string;
            result?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            error?: string;
        }): Task {
            const message = new Task({});
            if (data.taskId != null) {
                message.taskId = data.taskId;
            }
            if (data.taskName != null) {
                message.taskName = data.taskName;
            }
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.result != null) {
                message.result = dependency_1.google.protobuf.Any.fromObject(data.result);
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                taskId?: string;
                taskName?: string;
                status?: string;
                result?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
                error?: string;
            } = {};
            if (this.taskId != null) {
                data.taskId = this.taskId;
            }
            if (this.taskName != null) {
                data.taskName = this.taskName;
            }
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.result != null) {
                data.result = this.result.toObject();
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.taskId.length)
                writer.writeString(1, this.taskId);
            if (this.taskName.length)
                writer.writeString(2, this.taskName);
            if (this.status.length)
                writer.writeString(3, this.status);
            if (this.has_result)
                writer.writeMessage(4, this.result, () => this.result.serialize(writer));
            if (this.error.length)
                writer.writeString(5, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Task {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Task();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.taskId = reader.readString();
                        break;
                    case 2:
                        message.taskName = reader.readString();
                        break;
                    case 3:
                        message.status = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.result, () => message.result = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    case 5:
                        message.error = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Task {
            return Task.deserialize(bytes);
        }
    }
    export class GameEventResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            balance?: number;
            game_id?: string;
            transactions?: TransactionItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
                if ("game_id" in data && data.game_id != undefined) {
                    this.game_id = data.game_id;
                }
                if ("transactions" in data && data.transactions != undefined) {
                    this.transactions = data.transactions;
                }
            }
        }
        get balance() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set balance(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get game_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set game_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get transactions() {
            return pb_1.Message.getRepeatedWrapperField(this, TransactionItem, 3) as TransactionItem[];
        }
        set transactions(value: TransactionItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            balance?: number;
            game_id?: string;
            transactions?: ReturnType<typeof TransactionItem.prototype.toObject>[];
        }): GameEventResponse {
            const message = new GameEventResponse({});
            if (data.balance != null) {
                message.balance = data.balance;
            }
            if (data.game_id != null) {
                message.game_id = data.game_id;
            }
            if (data.transactions != null) {
                message.transactions = data.transactions.map(item => TransactionItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                balance?: number;
                game_id?: string;
                transactions?: ReturnType<typeof TransactionItem.prototype.toObject>[];
            } = {};
            if (this.balance != null) {
                data.balance = this.balance;
            }
            if (this.game_id != null) {
                data.game_id = this.game_id;
            }
            if (this.transactions != null) {
                data.transactions = this.transactions.map((item: TransactionItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.balance != 0)
                writer.writeDouble(1, this.balance);
            if (this.game_id.length)
                writer.writeString(2, this.game_id);
            if (this.transactions.length)
                writer.writeRepeatedMessage(3, this.transactions, (item: TransactionItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GameEventResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GameEventResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.balance = reader.readDouble();
                        break;
                    case 2:
                        message.game_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.transactions, () => pb_1.Message.addToRepeatedWrapperField(message, 3, TransactionItem.deserialize(reader), TransactionItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GameEventResponse {
            return GameEventResponse.deserialize(bytes);
        }
    }
    export class TransactionItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            action_id?: string;
            tx_id?: string;
            processed_at?: string;
            bonus_amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("action_id" in data && data.action_id != undefined) {
                    this.action_id = data.action_id;
                }
                if ("tx_id" in data && data.tx_id != undefined) {
                    this.tx_id = data.tx_id;
                }
                if ("processed_at" in data && data.processed_at != undefined) {
                    this.processed_at = data.processed_at;
                }
                if ("bonus_amount" in data && data.bonus_amount != undefined) {
                    this.bonus_amount = data.bonus_amount;
                }
            }
        }
        get action_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set action_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get tx_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set tx_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get processed_at() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set processed_at(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get bonus_amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set bonus_amount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            action_id?: string;
            tx_id?: string;
            processed_at?: string;
            bonus_amount?: number;
        }): TransactionItem {
            const message = new TransactionItem({});
            if (data.action_id != null) {
                message.action_id = data.action_id;
            }
            if (data.tx_id != null) {
                message.tx_id = data.tx_id;
            }
            if (data.processed_at != null) {
                message.processed_at = data.processed_at;
            }
            if (data.bonus_amount != null) {
                message.bonus_amount = data.bonus_amount;
            }
            return message;
        }
        toObject() {
            const data: {
                action_id?: string;
                tx_id?: string;
                processed_at?: string;
                bonus_amount?: number;
            } = {};
            if (this.action_id != null) {
                data.action_id = this.action_id;
            }
            if (this.tx_id != null) {
                data.tx_id = this.tx_id;
            }
            if (this.processed_at != null) {
                data.processed_at = this.processed_at;
            }
            if (this.bonus_amount != null) {
                data.bonus_amount = this.bonus_amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.action_id.length)
                writer.writeString(1, this.action_id);
            if (this.tx_id.length)
                writer.writeString(2, this.tx_id);
            if (this.processed_at.length)
                writer.writeString(3, this.processed_at);
            if (this.bonus_amount != 0)
                writer.writeDouble(4, this.bonus_amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransactionItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransactionItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.action_id = reader.readString();
                        break;
                    case 2:
                        message.tx_id = reader.readString();
                        break;
                    case 3:
                        message.processed_at = reader.readString();
                        break;
                    case 4:
                        message.bonus_amount = reader.readDouble();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransactionItem {
            return TransactionItem.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMockServiceService {
        static definition = {
            SimulateGameSession: {
                path: "/mock.MockService/SimulateGameSession",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: GameSessionMock) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GameSessionMock.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Task) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Task.deserialize(new Uint8Array(bytes))
            },
            StreamGameEvents: {
                path: "/mock.MockService/StreamGameEvents",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: GameSessionMock) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GameSessionMock.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: GameEventResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => GameEventResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract SimulateGameSession(call: grpc_1.ServerUnaryCall<GameSessionMock, Task>, callback: grpc_1.sendUnaryData<Task>): void;
        abstract StreamGameEvents(call: grpc_1.ServerWritableStream<GameSessionMock, GameEventResponse>): void;
    }
    export class MockServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedMockServiceService.definition, "MockService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        SimulateGameSession: GrpcUnaryServiceInterface<GameSessionMock, Task> = (message: GameSessionMock, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Task>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Task>, callback?: grpc_1.requestCallback<Task>): grpc_1.ClientUnaryCall => {
            return super.SimulateGameSession(message, metadata, options, callback);
        };
        StreamGameEvents: GrpcStreamServiceInterface<GameSessionMock, GameEventResponse> = (message: GameSessionMock, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<GameEventResponse> => {
            return super.StreamGameEvents(message, metadata, options);
        };
    }
}
